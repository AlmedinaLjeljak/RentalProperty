// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RentalProperty_.Data;

#nullable disable

namespace RentalProperty_.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20250314145121_Init")]
    partial class Init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("RentalProperty_.Entities.Models.Agent", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("BrojTelefona")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Prezime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Slika")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Agent");
                });

            modelBuilder.Entity("RentalProperty_.Entities.Models.AutentifikacijaToken", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<bool>("IsOtkljucano")
                        .HasColumnType("bit");

                    b.Property<int>("KorisnickiNalogId")
                        .HasColumnType("int");

                    b.Property<string>("TwoFKey")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ipAdresa")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("vrijednost")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("vrijemeEvidentiranja")
                        .HasColumnType("datetime2");

                    b.HasKey("id");

                    b.HasIndex("KorisnickiNalogId");

                    b.ToTable("AutentifikacijaToken");
                });

            modelBuilder.Entity("RentalProperty_.Entities.Models.Drzava", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Drzava");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Naziv = "Bosna i Hercegovina"
                        },
                        new
                        {
                            ID = 2,
                            Naziv = "Hrvatska"
                        },
                        new
                        {
                            ID = 3,
                            Naziv = "Srbija"
                        });
                });

            modelBuilder.Entity("RentalProperty_.Entities.Models.FAQ", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Odgovor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Pitanje")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("FAQ");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Odgovor = "Cijena zavisi od lokacije i vaseg izbora sta zelite iznajmiti",
                            Pitanje = "Koja je cijena izdavanja nekretnina?"
                        },
                        new
                        {
                            Id = 2,
                            Odgovor = "Naravno, nudimo vam na raspolaganje sve agente",
                            Pitanje = "Da li imate agente koji nam mogu pokazati nekretnine"
                        },
                        new
                        {
                            Id = 3,
                            Odgovor = "Cijena zavisi od kvadrature zeljene nekretnine",
                            Pitanje = "Od cega zavisi cijena nekretnine"
                        },
                        new
                        {
                            Id = 4,
                            Odgovor = "Na svakoj nekrentini je naznaceno da li je nekretninu moguce samo iznajmiti ili cak i kupiti",
                            Pitanje = "Da li je moguce naznacenu nekretninu i kupiti a ne samo iznajmiti"
                        });
                });

            modelBuilder.Entity("RentalProperty_.Entities.Models.Grad", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Grad");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Naziv = "Mostar"
                        },
                        new
                        {
                            ID = 2,
                            Naziv = "Sarajevo"
                        },
                        new
                        {
                            ID = 3,
                            Naziv = "Zagreb"
                        },
                        new
                        {
                            ID = 4,
                            Naziv = "Beograd"
                        },
                        new
                        {
                            ID = 5,
                            Naziv = "Konjic"
                        },
                        new
                        {
                            ID = 6,
                            Naziv = "Tuzla"
                        },
                        new
                        {
                            ID = 7,
                            Naziv = "Zenica"
                        },
                        new
                        {
                            ID = 8,
                            Naziv = "Bugojno"
                        },
                        new
                        {
                            ID = 9,
                            Naziv = "Bihac"
                        },
                        new
                        {
                            ID = 10,
                            Naziv = "Banja Luka"
                        });
                });

            modelBuilder.Entity("RentalProperty_.Entities.Models.Kategorija", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Kategorija");
                });

            modelBuilder.Entity("RentalProperty_.Entities.Models.KorisnickiNalog", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("is2FActive")
                        .HasColumnType("bit");

                    b.HasKey("ID");

                    b.ToTable("KorisnickiNalog");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("RentalProperty_.Entities.Models.KorisnikAgent", b =>
                {
                    b.Property<int>("KorisnikId")
                        .HasColumnType("int");

                    b.Property<int>("AgentId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DatumTermina")
                        .HasColumnType("datetime2");

                    b.Property<int>("VrijemeSat")
                        .HasColumnType("int");

                    b.HasKey("KorisnikId", "AgentId", "DatumTermina");

                    b.HasIndex("AgentId");

                    b.ToTable("KorisnikAgent");
                });

            modelBuilder.Entity("RentalProperty_.Entities.Models.KorisnikNekretnina", b =>
                {
                    b.Property<int>("NekretninaId")
                        .HasColumnType("int");

                    b.Property<int>("KorisnikId")
                        .HasColumnType("int");

                    b.Property<DateTime>("datumIzdavanja")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Izdano")
                        .HasColumnType("bit");

                    b.HasKey("NekretninaId", "KorisnikId", "datumIzdavanja");

                    b.HasIndex("KorisnikId");

                    b.ToTable("KorisnikNekretnina");
                });

            modelBuilder.Entity("RentalProperty_.Entities.Models.LogKretanjePoSistemu", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("ExceptionMessage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IpAdresa")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsException")
                        .HasColumnType("bit");

                    b.Property<int>("KorisnikID")
                        .HasColumnType("int");

                    b.Property<string>("PostData")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("QueryPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Vrijeme")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.HasIndex("KorisnikID");

                    b.ToTable("LogKretanjePoSistemu");
                });

            modelBuilder.Entity("RentalProperty_.Entities.Models.Nekretnina", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<float>("Cijena")
                        .HasColumnType("real");

                    b.Property<int>("KategorijaID")
                        .HasColumnType("int");

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Opis")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Slika")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("KategorijaID");

                    b.ToTable("Nekretnina");
                });

            modelBuilder.Entity("RentalProperty_.Entities.Models.Recenzija", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Ime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Prezime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Slika")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tekst")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Recenzija");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Ime = "Alema",
                            Prezime = "Duvnjak",
                            Slika = "assets/1rec.jpg",
                            Tekst = "Dugo trazenu nekretninu pronasli smo pomocu ove agencije za izdavanje nekretnina. Zadovoljni korisnici. "
                        },
                        new
                        {
                            Id = 2,
                            Ime = "Almedina",
                            Prezime = "Ljeljak",
                            Slika = "assets/2rec.jpg",
                            Tekst = "Iznajmljivali smo nekreninu preko ove agencije dugi niz godina,prezadovoljni smo. "
                        },
                        new
                        {
                            Id = 3,
                            Ime = "Emina",
                            Prezime = "Junuz",
                            Slika = "assets/3rec.jpg",
                            Tekst = "Zadovoljni korisnici svih usluga koje nudi data agencija za iznajmljivanje."
                        },
                        new
                        {
                            Id = 4,
                            Ime = "Iris",
                            Prezime = "Memic",
                            Slika = "assets/4rec.jpg",
                            Tekst = "Usluga je na zadovoljavajucem nivou."
                        });
                });

            modelBuilder.Entity("RentalProperty_.Entities.Models.Spol", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Spol");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Naziv = "Zenski"
                        },
                        new
                        {
                            ID = 2,
                            Naziv = "Muski"
                        });
                });

            modelBuilder.Entity("RentalProperty_.Entities.Models.Tfa", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("TwoFKey")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Tfa");
                });

            modelBuilder.Entity("RentalProperty_.Entities.Models.Administrator", b =>
                {
                    b.HasBaseType("RentalProperty_.Entities.Models.KorisnickiNalog");

                    b.Property<string>("Ime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Prezime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("Administrator");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Password = "admin",
                            Username = "admin",
                            is2FActive = false,
                            Ime = "Almedina",
                            Prezime = "Ljeljak"
                        },
                        new
                        {
                            ID = 2,
                            Password = "host",
                            Username = "host",
                            is2FActive = false,
                            Ime = "Alema",
                            Prezime = "Duvnjak"
                        });
                });

            modelBuilder.Entity("RentalProperty_.Entities.Models.Korisnik", b =>
                {
                    b.HasBaseType("RentalProperty_.Entities.Models.KorisnickiNalog");

                    b.Property<string>("BrojTelefona")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DrazavaID")
                        .HasColumnType("int");

                    b.Property<int>("GradID")
                        .HasColumnType("int");

                    b.Property<string>("Ime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Prezime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Slika")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SpolID")
                        .HasColumnType("int");

                    b.HasIndex("DrazavaID");

                    b.HasIndex("GradID");

                    b.HasIndex("SpolID");

                    b.ToTable("Korisnik");

                    b.HasData(
                        new
                        {
                            ID = 3,
                            Password = "almedina123",
                            Username = "almedinalj",
                            is2FActive = false,
                            BrojTelefona = "062123123",
                            DrazavaID = 1,
                            GradID = 5,
                            Ime = "Almedina",
                            Prezime = "Ljeljak",
                            Slika = "assets/1korisnik.jpg",
                            SpolID = 1
                        },
                        new
                        {
                            ID = 4,
                            Password = "alema123",
                            Username = "alemad",
                            is2FActive = false,
                            BrojTelefona = "062345678",
                            DrazavaID = 1,
                            GradID = 8,
                            Ime = "Alema",
                            Prezime = "Duvnjak",
                            Slika = "assets/2korisnik.jpg",
                            SpolID = 1
                        },
                        new
                        {
                            ID = 5,
                            Password = "adil123",
                            Username = "adilj",
                            is2FActive = false,
                            BrojTelefona = "062897855",
                            DrazavaID = 2,
                            GradID = 3,
                            Ime = "Adil",
                            Prezime = "Joldic",
                            Slika = "assets/3korisnik.jpg",
                            SpolID = 2
                        },
                        new
                        {
                            ID = 6,
                            Password = "denis123",
                            Username = "denism",
                            is2FActive = false,
                            BrojTelefona = "061789635",
                            DrazavaID = 3,
                            GradID = 4,
                            Ime = "Denis",
                            Prezime = "Music",
                            Slika = "assets/4korisnik.jpg",
                            SpolID = 2
                        });
                });

            modelBuilder.Entity("RentalProperty_.Entities.Models.AutentifikacijaToken", b =>
                {
                    b.HasOne("RentalProperty_.Entities.Models.KorisnickiNalog", "korisnickiNalog")
                        .WithMany()
                        .HasForeignKey("KorisnickiNalogId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("korisnickiNalog");
                });

            modelBuilder.Entity("RentalProperty_.Entities.Models.KorisnikAgent", b =>
                {
                    b.HasOne("RentalProperty_.Entities.Models.Agent", "Agent")
                        .WithMany()
                        .HasForeignKey("AgentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("RentalProperty_.Entities.Models.Korisnik", "Korisnik")
                        .WithMany()
                        .HasForeignKey("KorisnikId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Agent");

                    b.Navigation("Korisnik");
                });

            modelBuilder.Entity("RentalProperty_.Entities.Models.KorisnikNekretnina", b =>
                {
                    b.HasOne("RentalProperty_.Entities.Models.Korisnik", "Korisnik")
                        .WithMany()
                        .HasForeignKey("KorisnikId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("RentalProperty_.Entities.Models.Nekretnina", "Nekretnina")
                        .WithMany()
                        .HasForeignKey("NekretninaId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Korisnik");

                    b.Navigation("Nekretnina");
                });

            modelBuilder.Entity("RentalProperty_.Entities.Models.LogKretanjePoSistemu", b =>
                {
                    b.HasOne("RentalProperty_.Entities.Models.KorisnickiNalog", "Korisnik")
                        .WithMany()
                        .HasForeignKey("KorisnikID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Korisnik");
                });

            modelBuilder.Entity("RentalProperty_.Entities.Models.Nekretnina", b =>
                {
                    b.HasOne("RentalProperty_.Entities.Models.Kategorija", "Kategorija")
                        .WithMany()
                        .HasForeignKey("KategorijaID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Kategorija");
                });

            modelBuilder.Entity("RentalProperty_.Entities.Models.Administrator", b =>
                {
                    b.HasOne("RentalProperty_.Entities.Models.KorisnickiNalog", null)
                        .WithOne()
                        .HasForeignKey("RentalProperty_.Entities.Models.Administrator", "ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RentalProperty_.Entities.Models.Korisnik", b =>
                {
                    b.HasOne("RentalProperty_.Entities.Models.Drzava", "Drzava")
                        .WithMany()
                        .HasForeignKey("DrazavaID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("RentalProperty_.Entities.Models.Grad", "Grad")
                        .WithMany()
                        .HasForeignKey("GradID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("RentalProperty_.Entities.Models.KorisnickiNalog", null)
                        .WithOne()
                        .HasForeignKey("RentalProperty_.Entities.Models.Korisnik", "ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RentalProperty_.Entities.Models.Spol", "Spol")
                        .WithMany()
                        .HasForeignKey("SpolID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Drzava");

                    b.Navigation("Grad");

                    b.Navigation("Spol");
                });
#pragma warning restore 612, 618
        }
    }
}
